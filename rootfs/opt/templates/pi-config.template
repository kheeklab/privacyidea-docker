import os
import logging
import sys

SECRET_KEY = os.environ.get('PI_SECRET_KEY')
if SECRET_KEY is None:
    print("SECRET_KEY not set! Refusing to start")
    sys.exit(1)

PI_PEPPER = os.environ.get('PI_PEPPER')
if PI_PEPPER is None:
    print("PI_PEPPER not set! Refusing to start")
    sys.exit(1)

# The realm, where users are allowed to login as administrators
SUPERUSER_REALM = os.environ.get('PI_SUPERUSER_REALM','administrator').split(',')

SQLALCHEMY_DATABASE_URI = "$SQLALCHEMY_DATABASE_URI"
PI_ENCFILE = os.environ.get("PI_ENCFILE", "/data/privacyidea/keys/encfile")
PI_HSM = os.environ.get("PI_HSM", "default")
PI_AUDIT_NO_SIGN = os.environ.get("PI_AUDIT_NO_SIGN", "False").lower() == "true"
PI_AUDIT_MODULE = os.environ.get("", "privacyidea.lib.auditmodules.sqlaudit")
# PI_AUDIT_KEY_PRIVATE will be used only when PI_AUDIT_NO_SIGN is True
PI_AUDIT_KEY_PRIVATE = os.environ.get("PI_AUDIT_KEY_PRIVATE_PATH", "/data/privacyidea/keys/private.pem")
# PI_AUDIT_KEY_PUBLIC will be used only when PI_AUDIT_NO_SIGN is True
PI_AUDIT_KEY_PUBLIC = os.environ.get("PI_AUDIT_KEY_PUBLIC_PATH", "/data/privacyidea/keys/public.pem")
PI_LOGFILE = os.environ.get("PI_LOGFILE", "/dev/stdout")
PI_LOGLEVEL = logging.getLevelName(os.environ.get("PI_LOGLEVEL", 20))
PI_NODE = os.environ.get("HOSTNAME", "localnode")
CACHE_TYPE = os.environ.get("PI_CACHE_TYPE", "simple")
PI_EXTERNAL_LINKS = os.environ.get("PI_EXTERNAL_LINKS", "True").lower() == "true"
PI_VASCO_LIBRARY = None
PI_ENGINE_REGISTRY_CLASS = os.environ.get("PI_ENGINE_REGISTRY_CLASS", "shared")
PI_PAGE_TITLE = os.environ.get("PI_PAGE_TITLE", "privacyIDEA Authentication System")
PI_AUDIT_SQL_TRUNCATE = True
PI_NODE_UUID= os.environ.get("PI_NODE_UUID", "8e4272a9-9037-40df-8aa3-976e4a04b5a9")
